"""
Image generation for country summary.
"""

import os
from PIL import Image, ImageDraw, ImageFont
from datetime import datetime
from typing import List, Optional
from config import settings
from models import CountryDB


def generate_summary_image(
    total_countries: int,
    top_countries: List[CountryDB],
    last_refresh: datetime
) -> str:
    """
    Generate summary image with country statistics.
    
    Args:
        total_countries: Total number of countries
        top_countries: List of top 5 countries by GDP
        last_refresh: Timestamp of last refresh
        
    Returns:
        Path to generated image
    """
    # Image dimensions
    width = 800
    height = 600
    
    # Create image with white background
    img = Image.new('RGB', (width, height), color='white')
    draw = ImageDraw.Draw(img)
    
    # Try to use a nice font, fallback to default
    try:
        title_font = ImageFont.truetype("arial.ttf", 32)
        heading_font = ImageFont.truetype("arial.ttf", 24)
        text_font = ImageFont.truetype("arial.ttf", 18)
    except:
        title_font = ImageFont.load_default()
        heading_font = ImageFont.load_default()
        text_font = ImageFont.load_default()
    
    # Colors
    title_color = (31, 119, 180)  # Blue
    heading_color = (50, 50, 50)  # Dark gray
    text_color = (80, 80, 80)     # Gray
    
    # Current Y position
    y = 30
    
    # Title
    draw.text((width/2, y), "Country Currency Summary", 
              font=title_font, fill=title_color, anchor="mt")
    y += 60
    
    # Total countries
    draw.text((50, y), f"Total Countries: {total_countries}", 
              font=heading_font, fill=heading_color)
    y += 50
    
    # Top 5 countries heading
    draw.text((50, y), "Top 5 Countries by GDP:", 
              font=heading_font, fill=heading_color)
    y += 40
    
    # List top countries
    for i, country in enumerate(top_countries, 1):
        gdp_formatted = f"${country.estimated_gdp:,.2f}" if country.estimated_gdp else "N/A"
        text = f"{i}. {country.name}: {gdp_formatted}"
        draw.text((70, y), text, font=text_font, fill=text_color)
        y += 35
    
    # Timestamp
    y = height - 80
    timestamp_str = last_refresh.strftime("%Y-%m-%d %H:%M:%S UTC")
    draw.text((50, y), f"Last Refreshed: {timestamp_str}", 
              font=text_font, fill=text_color)
    
    # Footer
    y += 30
    draw.text((50, y), "Generated by Country Currency API", 
              font=text_font, fill=text_color)
    
    # Save image
    image_path = os.path.join(settings.IMAGE_CACHE_DIR, settings.IMAGE_FILE_NAME)
    img.save(image_path)
    
    return image_path


def get_image_path() -> Optional[str]:
    """
    Get path to summary image if it exists.
    
    Returns:
        Path to image or None if not found
    """
    image_path = os.path.join(settings.IMAGE_CACHE_DIR, settings.IMAGE_FILE_NAME)
    
    if os.path.exists(image_path):
        return image_path
    return None